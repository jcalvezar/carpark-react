[{"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\index.js":"1","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\Layout.js":"2","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\Pie.js":"3","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\Barra.js":"4","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\Jcontenido.js":"5","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\Jrecupero.js":"6","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\PageError.js":"7","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\Jregistro.js":"8","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\Usermenu.js":"9","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\Jlogin.js":"10","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\Jmenu.js":"11","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\PanelAdmin\\index.js":"12","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\AdminParkings\\index.js":"13","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\Jmenulist.js":"14","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\PanelAdmin\\paneles.js":"15","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\AdminUsers\\index.js":"16","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\AdminCars\\index.js":"17","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\store.js":"18","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Table.js":"19","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Title.js":"20","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Table2.js":"21","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Modal.js":"22","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\AdminParkings\\Modal.js":"23","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\AdminCars\\Modal.js":"24","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\AdminUsers\\Modal.js":"25"},{"size":341,"mtime":1613673175797,"results":"26","hashOfConfig":"27"},{"size":2106,"mtime":1613595549746,"results":"28","hashOfConfig":"27"},{"size":1135,"mtime":1613446911051,"results":"29","hashOfConfig":"27"},{"size":3339,"mtime":1613455674112,"results":"30","hashOfConfig":"27"},{"size":6057,"mtime":1613446911047,"results":"31","hashOfConfig":"27"},{"size":2170,"mtime":1613446911049,"results":"32","hashOfConfig":"27"},{"size":398,"mtime":1613446911050,"results":"33","hashOfConfig":"27"},{"size":6344,"mtime":1613446911050,"results":"34","hashOfConfig":"27"},{"size":2282,"mtime":1613446911051,"results":"35","hashOfConfig":"27"},{"size":2904,"mtime":1613491047033,"results":"36","hashOfConfig":"27"},{"size":5233,"mtime":1613615647700,"results":"37","hashOfConfig":"27"},{"size":440,"mtime":1613594251655,"results":"38","hashOfConfig":"27"},{"size":1322,"mtime":1614224090052,"results":"39","hashOfConfig":"27"},{"size":1440,"mtime":1613688515389,"results":"40","hashOfConfig":"27"},{"size":2140,"mtime":1614221271059,"results":"41","hashOfConfig":"27"},{"size":1254,"mtime":1614224147987,"results":"42","hashOfConfig":"27"},{"size":1278,"mtime":1614223933560,"results":"43","hashOfConfig":"27"},{"size":4489,"mtime":1613871361918,"results":"44","hashOfConfig":"27"},{"size":2738,"mtime":1613715457040,"results":"45","hashOfConfig":"27"},{"size":346,"mtime":1613713205081,"results":"46","hashOfConfig":"27"},{"size":15382,"mtime":1614315689545,"results":"47","hashOfConfig":"27"},{"size":2250,"mtime":1614316620235,"results":"48","hashOfConfig":"27"},{"size":376,"mtime":1614317380443,"results":"49","hashOfConfig":"27"},{"size":355,"mtime":1614317400858,"results":"50","hashOfConfig":"27"},{"size":1348,"mtime":1614317067557,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"13hs4mi",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\index.js",[],["107","108"],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\Layout.js",[],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\Pie.js",[],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\Barra.js",[],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\Jcontenido.js",[],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\Jrecupero.js",[],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\PageError.js",[],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\Jregistro.js",["109"],"import React, { useState } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n//import Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function Jregistro() {\r\n  const classes = useStyles();\r\n\r\n  //const dispatch = useDispatch();\r\n\r\n  const [registrado, setRegistrado] = useState(false);\r\n  const [datos, setDatos] = useState({ notificaciones: \"0\" });\r\n\r\n  const enviarRegistro = () => {\r\n    console.log(\"Enviando...\", datos);\r\n    //dispatch( userSignupRequest(datos) ).then( res => {\r\n\r\n    //setRegistrado(true);\r\n    //});\r\n  };\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        {registrado ? (\r\n          <Typography variant=\"h6\" color=\"textSecondary\" align=\"center\">\r\n            Revise su email, y haga click en confirmar.\r\n          </Typography>\r\n        ) : (\r\n          <React.Fragment>\r\n            <Avatar className={classes.avatar}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Registro\r\n            </Typography>\r\n            <form className={classes.form} noValidate>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12} sm={6}>\r\n                  <TextField\r\n                    autoComplete=\"fname\"\r\n                    name=\"firstName\"\r\n                    variant=\"outlined\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"firstName\"\r\n                    label=\"First Name\"\r\n                    onChange={(e) =>\r\n                      setDatos({ ...datos, firstname: e.target.value })\r\n                    }\r\n                    autoFocus\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"lastName\"\r\n                    label=\"Last Name\"\r\n                    name=\"lastName\"\r\n                    autoComplete=\"lname\"\r\n                    onChange={(e) =>\r\n                      setDatos({ ...datos, lastname: e.target.value })\r\n                    }\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"email\"\r\n                    label=\"Email Address\"\r\n                    name=\"email\"\r\n                    autoComplete=\"email\"\r\n                    onChange={(e) =>\r\n                      setDatos({ ...datos, email: e.target.value })\r\n                    }\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    required\r\n                    fullWidth\r\n                    name=\"password\"\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    autoComplete=\"current-password\"\r\n                    onChange={(e) =>\r\n                      setDatos({ ...datos, password: e.target.value })\r\n                    }\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    required\r\n                    fullWidth\r\n                    name=\"confirm_password\"\r\n                    label=\"Confirmation\"\r\n                    type=\"password\"\r\n                    id=\"confirm_password\"\r\n                    autoComplete=\"current-confirmation\"\r\n                    onChange={(e) =>\r\n                      setDatos({ ...datos, confirm_password: e.target.value })\r\n                    }\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        value=\"1\"\r\n                        color=\"primary\"\r\n                        onChange={(e) =>\r\n                          setDatos({\r\n                            ...datos,\r\n                            notificaciones: e.target.checked ? \"1\" : \"0\",\r\n                          })\r\n                        }\r\n                      />\r\n                    }\r\n                    label=\"I want to receive inspiration, marketing promotions and updates via email.\"\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Button\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}\r\n                onClick={enviarRegistro}\r\n              >\r\n                Registrarme\r\n              </Button>\r\n              <Grid container justify=\"flex-end\">\r\n                <Grid item>\r\n                  <Link component={RouterLink} to=\"/home\" variant=\"body2\">\r\n                    Already have an account? Sign in\r\n                  </Link>\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\Usermenu.js",[],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\Jlogin.js",[],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\Jmenu.js",["110","111"],"import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Popper from '@material-ui/core/Popper';\r\n//import MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\n/*\r\nconst StyledMenu = withStyles({\r\n  paper: {\r\n    border: '1px solid #d3d4d5',\r\n  },\r\n})((props) => (\r\n  <Menu\r\n    elevation={0}\r\n    getContentAnchorEl={null}\r\n    anchorOrigin={{\r\n      vertical: 'bottom',\r\n      horizontal: 'left',\r\n    }}\r\n    transformOrigin={{\r\n      vertical: 'top',\r\n      horizontal: 'left',\r\n    }}\r\n    {...props}\r\n  />\r\n));\r\n\r\nconst StyledMenuItem = withStyles((theme) => ({\r\n  root: {\r\n\r\n  },\r\n}))(MenuItem);\r\n*/\r\n\r\nexport default function Jmenu(props) {\r\n  const history = useHistory();\r\n\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const anchorRef = React.useRef(null);\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen);\r\n  };\r\n\r\n  const handleClose = (event) => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  function handleListKeyDown(event) {\r\n    if (event.key === 'Tab') {\r\n      event.preventDefault();\r\n      setOpen(false);\r\n    }\r\n  }\r\n\r\n  // return focus to the button when we transitioned from !open -> open\r\n  const prevOpen = React.useRef(open);\r\n  React.useEffect(() => {\r\n    if (prevOpen.current === true && open === false) {\r\n      anchorRef.current.focus();\r\n    }\r\n\r\n    prevOpen.current = open;\r\n  }, [open]);\r\n\r\n  const irA = (patho) => {\r\n    //handleClose();\r\n    setOpen(false);\r\n    history.push(patho);\r\n  };\r\n\r\n  return (\r\n    <div >\r\n      <Button\r\n        color=\"inherit\"\r\n        ref={anchorRef}\r\n        aria-controls={open ? 'menu-list-grow' : undefined}\r\n        aria-haspopup=\"true\"\r\n        onClick={handleToggle}\r\n      >\r\n        {props.text}\r\n      </Button>\r\n      <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal\r\n        placement=\"bottom-start\">\r\n        {({ TransitionProps, placement }) => (\r\n          <Grow\r\n            {...TransitionProps}\r\n            style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center top' }}\r\n          >\r\n            <Paper>\r\n              <ClickAwayListener onClickAway={handleClose}>\r\n                <MenuList autoFocusItem={open} id=\"menu-list-grow\" onKeyDown={handleListKeyDown}>\r\n                  {props.items.map((x, key) => {\r\n                    const IconName = x.icon;\r\n\r\n                    return (\r\n                      <MenuItem key={key} onClick={() => { irA(x.path); }}>\r\n                        <ListItemIcon>\r\n                          <IconName />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={x.text} />\r\n                      </MenuItem>\r\n                    )\r\n                  })}\r\n                </MenuList>\r\n              </ClickAwayListener>\r\n            </Paper>\r\n          </Grow>\r\n        )}\r\n      </Popper>\r\n    </div>\r\n  );\r\n\r\n\r\n\r\n\r\n  /*\r\n    //const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [anchorEl, setAnchorEl] = useState(false);\r\n  \r\n    const handleClick = (event) => {\r\n      setAnchorEl({ open: true, anchorEl: event.currentTarget });\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setAnchorEl(null);\r\n      console.log('Path: ');\r\n    };\r\n  \r\n    const irA = (patho) => {\r\n      handleClose();\r\n      history.push(patho);\r\n    };\r\n  \r\n    const handleClickAway = () => {\r\n      //setOpen(false);\r\n      setAnchorEl(null);\r\n    };\r\n  \r\n    return (\r\n      //<ClickAwayListener onClickAway={handleClickAway}>\r\n      <ClickAwayListener\r\n        mouseEvent=\"onMouseDown\"\r\n        touchEvent=\"onTouchStart\"\r\n        onClickAway={handleClickAway}\r\n      >\r\n        <div>\r\n  \r\n          <Button\r\n            aria-controls=\"customized-menu\"\r\n            aria-haspopup=\"true\"\r\n            color=\"inherit\"\r\n            onClick={handleClick}\r\n          >\r\n            {props.text}\r\n          </Button>\r\n  \r\n          <StyledMenu\r\n            id=\"customized-menu\"\r\n            anchorEl={anchorEl ? anchorEl.anchorEl : null}\r\n            open={Boolean(anchorEl ? anchorEl.anchorEl : null)}\r\n            onClose={handleClose}\r\n          >\r\n            {props.items.map(x => {\r\n              const IconName = x.icon;\r\n  \r\n              return (\r\n                <StyledMenuItem onClick={() => { irA(x.path); }}>\r\n                  <ListItemIcon>\r\n                    <IconName />\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={x.text} />\r\n                </StyledMenuItem>\r\n              )\r\n            })}\r\n  \r\n          </StyledMenu>\r\n  \r\n        </div>\r\n      </ClickAwayListener>\r\n    );\r\n    */\r\n}\r\n","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\PanelAdmin\\index.js",[],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\AdminParkings\\index.js",[],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Layout\\Jmenulist.js",[],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\PanelAdmin\\paneles.js",[],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\AdminUsers\\index.js",[],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\AdminCars\\index.js",[],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\store.js",[],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Table.js",[],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Title.js",[],["112","113"],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Table2.js",["114"],"import React, { useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n//import Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n//import FormControlLabel from '@material-ui/core/FormControlLabel';\r\n//import Switch from '@material-ui/core/Switch';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n//import FilterListIcon from '@material-ui/icons/FilterList';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n//import AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Fab from '@material-ui/core/Fab';\r\n//import Modal from './AdminParkings/Modal';\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nfunction EnhancedTableHead(props) {\r\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                        style={{ padding: '5px 0px' }}\r\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                        checked={rowCount > 0 && numSelected === rowCount}\r\n                        onChange={onSelectAllClick}\r\n                        inputProps={{ 'aria-label': 'select all desserts' }}\r\n                    />\r\n                </TableCell>\r\n                {props.headCells.map((headCell) => (\r\n                    <TableCell\r\n                        width={headCell.width}\r\n                        key={headCell.name}\r\n                        align={headCell.align}\r\n                        padding={headCell.disablePadding ? 'none' : 'default'}\r\n                        sortDirection={orderBy === headCell.name ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.name}\r\n                            direction={orderBy === headCell.name ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell.name)}\r\n                        >\r\n                            {headCell.label}\r\n                            {orderBy === headCell.name ? (\r\n                                <span className={classes.visuallyHidden}>\r\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                                </span>\r\n                            ) : null}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    onSelectAllClick: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n    headCells: PropTypes.object.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(1),\r\n    },\r\n    highlight:\r\n        theme.palette.type === 'light'\r\n            ? {\r\n                color: theme.palette.secondary.main,\r\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n            }\r\n            : {\r\n                color: theme.palette.text.primary,\r\n                backgroundColor: theme.palette.secondary.dark,\r\n            },\r\n    title: {\r\n        flex: '1 1 100%',\r\n    },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles();\r\n    const { numSelected } = props;\r\n\r\n    return (\r\n        <Toolbar\r\n            className={clsx(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n        >\r\n            {numSelected > 0 ? (\r\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n                    {numSelected} seleccionados\r\n                </Typography>\r\n            ) : (\r\n                    <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n                        {props.title}\r\n                    </Typography>\r\n                )}\r\n\r\n            {numSelected > 0 ? (\r\n                <Tooltip title=\"Delete\">\r\n                    <IconButton aria-label=\"delete\">\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            ) : props.canAdd ? (\r\n                <Tooltip title=\"Agregar Registro\">\r\n\r\n                    <Fab aria-label=\"agregar registro\" onClick={props.openModal}>\r\n                        <AddIcon />\r\n                    </Fab>\r\n\r\n                </Tooltip>) : null\r\n            }\r\n\r\n        </Toolbar>\r\n    );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    paper: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    table: {\r\n        minWidth: 400,\r\n    },\r\n    visuallyHidden: {\r\n        border: 0,\r\n        clip: 'rect(0 0 0 0)',\r\n        height: 1,\r\n        margin: -1,\r\n        overflow: 'hidden',\r\n        padding: 0,\r\n        position: 'absolute',\r\n        top: 20,\r\n        width: 1,\r\n    },\r\n}));\r\n\r\nexport default function EnhancedTable(props) {\r\n    const modalEl = useRef({});\r\n    const Modal = props.data.modal;\r\n    //const modalEl = Modal;\r\n    const classes = useStyles();\r\n    const [order, setOrder] = React.useState('asc');\r\n    const [orderBy, setOrderBy] = React.useState('calories');\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [dense, setDense] = React.useState(true);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n    const rows = props.data.rows;\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = rows.map((n) => n.id);\r\n            setSelected(newSelecteds);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };\r\n\r\n    const handleClick = (event, name) => {\r\n        const selectedIndex = selected.indexOf(name);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, name);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleModal = (row) => {\r\n        modalEl.current && modalEl.current.handleClickOpen(row);\r\n        //console.log('Deberia abrir');\r\n    }\r\n\r\n    /*\r\n    const handleChangeDense = (event) => {\r\n        setDense(event.target.checked);\r\n    };\r\n    */\r\n\r\n    const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.root}>\r\n\r\n                <EnhancedTableToolbar numSelected={selected.length} title={props.data.title} openModal={() => { handleModal(false); }} canAdd={props.data.canAdd} />\r\n                <TableContainer>\r\n                    <Table\r\n                        className={classes.table}\r\n                        aria-labelledby=\"tableTitle\"\r\n                        size={dense ? 'small' : 'medium'}\r\n                        aria-label=\"enhanced table\"\r\n                    >\r\n                        <EnhancedTableHead\r\n                            classes={classes}\r\n                            numSelected={selected.length}\r\n                            order={order}\r\n                            orderBy={orderBy}\r\n                            onSelectAllClick={handleSelectAllClick}\r\n                            onRequestSort={handleRequestSort}\r\n                            rowCount={rows.length}\r\n                            headCells={props.data.fields}\r\n                        />\r\n                        <TableBody>\r\n                            {stableSort(rows, getComparator(order, orderBy))\r\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                .map((row, index) => {\r\n                                    const isItemSelected = isSelected(row.id);\r\n                                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                    return (\r\n                                        <TableRow\r\n                                            hover\r\n\r\n                                            role=\"checkbox\"\r\n                                            aria-checked={isItemSelected}\r\n                                            tabIndex={-1}\r\n                                            key={row.id}\r\n                                            selected={isItemSelected}\r\n                                        >\r\n                                            <TableCell padding=\"checkbox\" onClick={(event) => handleClick(event, row.id)}>\r\n                                                <Checkbox\r\n                                                    style={{ padding: '5px 0px' }}\r\n                                                    checked={isItemSelected}\r\n                                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                                />\r\n                                            </TableCell>\r\n\r\n                                            {props.data.fields.map((field, idx) => {\r\n                                                if (field.name === 'id') return (\r\n                                                    <TableCell key={idx} component=\"th\" id={labelId} scope=\"row\" padding={field.disablePadding ? 'none' : 'default'} width={field.width}>\r\n                                                        {row.id}\r\n                                                    </TableCell>);\r\n                                                if (field.name === 'acc') return (\r\n                                                    <TableCell padding={field.disablePadding ? 'none' : 'default'} key={idx} align=\"right\" width={field.width}>\r\n                                                        <ButtonGroup size=\"small\" color=\"primary\" aria-label=\"contained primary small button group\">\r\n                                                            <Tooltip title=\"Editar\">\r\n                                                                <IconButton aria-label=\"Editar\" onClick={() => { handleModal(row); }}>\r\n                                                                    <EditIcon />\r\n                                                                </IconButton>\r\n                                                            </Tooltip>\r\n                                                            <Tooltip title=\"Borrar\">\r\n                                                                <IconButton color=\"secondary\" aria-label=\"Borrar\">\r\n                                                                    <DeleteIcon />\r\n                                                                </IconButton>\r\n                                                            </Tooltip>\r\n                                                        </ButtonGroup>\r\n                                                    </TableCell>);\r\n                                                return (<TableCell key={idx} align={field.align} padding={field.disablePadding ? 'none' : 'default'} width={field.width}>{row[field.name]}</TableCell>)\r\n                                            })}\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            {emptyRows > 0 && (\r\n                                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                                    <TableCell colSpan={6} />\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n\r\n\r\n            </div>\r\n            {Modal ? (<Modal myRef={modalEl} />) : null}\r\n        </>\r\n\r\n    );\r\n\r\n}\r\n\r\n/*\r\n            <FormControlLabel\r\n                control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n                label=\"Dense padding\"\r\n            />\r\n*/","D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\Modal.js",[],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\AdminParkings\\Modal.js",[],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\AdminCars\\Modal.js",[],"D:\\jca\\trabajos\\pardo\\carpark\\web\\v004\\carpark-react\\src\\components\\AdminUsers\\Modal.js",[],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":43,"column":22,"nodeType":"121","messageId":"122","endLine":43,"endColumn":35},{"ruleId":"119","severity":1,"message":"123","line":2,"column":10,"nodeType":"121","messageId":"122","endLine":2,"endColumn":20},{"ruleId":"119","severity":1,"message":"124","line":4,"column":8,"nodeType":"121","messageId":"122","endLine":4,"endColumn":12},{"ruleId":"115","replacedBy":"125"},{"ruleId":"117","replacedBy":"126"},{"ruleId":"119","severity":1,"message":"127","line":210,"column":19,"nodeType":"121","messageId":"122","endLine":210,"endColumn":27},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"no-unused-vars","'setRegistrado' is assigned a value but never used.","Identifier","unusedVar","'withStyles' is defined but never used.","'Menu' is defined but never used.",["128"],["129"],"'setDense' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]